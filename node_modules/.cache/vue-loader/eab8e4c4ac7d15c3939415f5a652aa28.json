{"remainingRequest":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/src/views/copyMsg.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/src/views/copyMsg.vue","mtime":1643047829336},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}