{"remainingRequest":"/Users/qiushunqun/Desktop/_V/auth/vue_shop1-master/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/qiushunqun/Desktop/_V/auth/vue_shop1-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/qiushunqun/Desktop/_V/auth/vue_shop1-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiushunqun/Desktop/_V/auth/vue_shop1-master/src/components/WordList.vue?vue&type=template&id=520cd2f8&","dependencies":[{"path":"/Users/qiushunqun/Desktop/_V/auth/vue_shop1-master/src/components/WordList.vue","mtime":1637227885913},{"path":"/Users/qiushunqun/Desktop/_V/auth/vue_shop1-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/_V/auth/vue_shop1-master/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/_V/auth/vue_shop1-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/_V/auth/vue_shop1-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}