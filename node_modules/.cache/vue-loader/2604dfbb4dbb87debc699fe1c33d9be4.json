{"remainingRequest":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/src/views/copyMsg.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/src/views/copyMsg.vue","mtime":1642935039263},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IFdvcmREYXRhU2VydmljZUVYUCB9IGZyb20gIi4uL3NlcnZpY2VzL1RvZG9TZXJ2aWNlIjsgIAoKY29uc3QgY2l0eU9wdGlvbnMgPSBbJ+Wkp+eTticsICfkuK3nk7YnLCAnR3Vhbmd6aG91JywgJ1NoZW56aGVuJ107CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogInR1dG9yaWFscy1saXN0IiwKICBjb21wb25lbnRzOiB7ICAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsgCgogICAgICAgIAogICAgICAgIC8vIC0gLSAtIC0gICAKICAgICAgICAgY2hlY2tBbGw6IGZhbHNlLAogICAgICAgIGNoZWNrZWRDaXRpZXM6IFsnU2hhbmdoYWknLCAnQmVpamluZyddLAogICAgICAgIGNpdGllczogY2l0eU9wdGlvbnMsCiAgICAgICAgaXNJbmRldGVybWluYXRlOiB0cnVlLAoKICAgICAgICAvLyAtIC0gLSAtIAogICAgICBzaG93TW9kYWw6ZmFsc2UsCiAgICAgIGc6IiIsCiAgICAgIGQ6IiIsCiAgICAgIHYyOiIiLAogICAgICBEMTogJycsCiAgICAgIEQyOiAnJywKICAgICAgRDM6ICcnLAogICAgICBENDogJycsICAKICAgICAgZGF0ZVBpY2tlZDp7ICAKICAgICAgICBfMU06W10sCiAgICAgICAgXzJNOltdLAogICAgICAgIF8zTTpbXSwKICAgICAgICBfNE06W10sCiAgICAgICAgfQogICAgICAsCiAgICAgIGRpc3BCa2luZm86eyAgCiAgICAgICAgICB0cmFuc09VVFBVVDoieHgiLAogICAgICAgIF8xTTpbXSwKICAgICAgICBfMk06W10sCiAgICAgICAgXzNNOltdLAogICAgICAgIF80TTpbXSwKICAgICAgICB9CiAgICAgICwKICAgICAgbmV3VG9kbzp7IAogICAgICAgIHRleHQ6IiIsCiAgICAgICAgbmFtZToiIiwKICAgICAgICBhZHM6IiIsCiAgICAgICAgcGhvbmU6IiIsCiAgICAgICAgQ1JNd2F5Olsnc2VsZWN0ZWQgYW5kIGRpc2FibGVkJ10sCiAgICAgICAgY3JlYXRUaW1lOiAiIiwgLy8gRGF0ZSAKICAgICAgICBkYXRlTm90ZTpbXSwKICAgICAgICBwZGNvZWQ6W10sCiAgICAgICAgcGRfOTUwOltdLAogICAgICAgIHBkXzUwMDpbXSwKICAgICAgICBwZF8yNTA6W10sCiAgICAgICAgcGRfMTAwOltdLAogICAgICAgIG1lbW86W10sCiAgICAgICAgfSwgCgogICAgICAvLyAtIC0gLSAtIC0gCgogICAgICBwaWNrZXJPcHRpb25zOiB7CiAgICAgICAgICBkaXNhYmxlZERhdGUodGltZSkgewogICAgICAgICAgICByZXR1cm4gdGltZS5nZXRUaW1lKCkgPiBEYXRlLm5vdygpOwogICAgICAgICAgfSwKICAgICAgICAgIHNob3J0Y3V0czogW3sKICAgICAgICAgICAgdGV4dDogJ1RvZGF5JywKICAgICAgICAgICAgb25DbGljayhwaWNrZXIpIHsKICAgICAgICAgICAgICBwaWNrZXIuJGVtaXQoJ3BpY2snLCBuZXcgRGF0ZSgpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgewogICAgICAgICAgICB0ZXh0OiAnWWVzdGVyZGF5JywKICAgICAgICAgICAgb25DbGljayhwaWNrZXIpIHsKICAgICAgICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTsKICAgICAgICAgICAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgLSAzNjAwICogMTAwMCAqIDI0KTsKICAgICAgICAgICAgICBwaWNrZXIuJGVtaXQoJ3BpY2snLCBkYXRlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgewogICAgICAgICAgICB0ZXh0OiAnQSB3ZWVrIGFnbycsCiAgICAgICAgICAgIG9uQ2xpY2socGlja2VyKSB7CiAgICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7CiAgICAgICAgICAgICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpIC0gMzYwMCAqIDEwMDAgKiAyNCAqIDcpOwogICAgICAgICAgICAgIHBpY2tlci4kZW1pdCgncGljaycsIGRhdGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9XQogICAgICAgIH0sCiAgICAgICAgY2hlY2tMaXN0OiBbJ3NlbGVjdGVkIGFuZCBkaXNhYmxlZCcsJ09wdGlvbiBBJ10sCiAgICAgICAgdmFsdWUxOiAnJywKICAgICAgICB2YWx1ZTI6ICcnLAogICAgICAgIHZhbHVlMzogJycsCiAgICAgICAgIHZhbHVlMzM6IG5ldyBEYXRlKCksCgogICAgICAgIC8vIC0gLSAtIC0gLSAtIAogICAgfTsKICB9LAogIG1ldGhvZHM6IHsgIAoKICAgICAgdHJhbnNEYXlfTWRmMShNX1R5cGUpewogCgogICAgICAgIGxldCBSZUJfZGF0ZTsKICAgICAgICBsZXQgZGF5ID0gWyco5pelKScsJyjkuIApJywnKOS6jCknLCco5LiJKScsJyjlm5spJywnKOS6lCknLCco5YWtKSddOwoKLy8gdGhpcy5kaXNwQmtpbmZvLl8zTT0iQ09ERS0tLT4g56ys5LiA6ZqO5q61IgoKbGV0IHRlbXBTdHJpbmc9IiI7CmxldCBnZXRfTV9DTlQ9MTsKCi8vIE5UXzAxK05UXzAyK05UXzAzKwpsZXQgTlRfMDEgPSIiIDsKbGV0IE5UXzAyID0iIiA7CmxldCBOVF8wMyA9IiIgOwpsZXQgTlRfMDQgPSIiIDsKLy8gZ2V0X01fQ05UCgpzd2l0Y2goTV9UeXBlKSB7CiAgY2FzZSAxOgogICAgICBnZXRfTV9DTlQgPSB0aGlzLmRhdGVQaWNrZWQuXzFNLmxlbmd0aCA7CiAgICAvLyBjb2RlIGJsb2NrCiAgICBicmVhazsKICBjYXNlIDI6CiAgICAgIGdldF9NX0NOVCA9IHRoaXMuZGF0ZVBpY2tlZC5fMk0ubGVuZ3RoIDsKICAgIC8vIGNvZGUgYmxvY2sKICAgIGJyZWFrOwogIGNhc2UgMzoKICAgICAgZ2V0X01fQ05UID0gdGhpcy5kYXRlUGlja2VkLl8zTS5sZW5ndGggOwogICAgLy8gY29kZSBibG9jawogICAgYnJlYWs7CiAgY2FzZSA0OgogICAgICBnZXRfTV9DTlQgPSB0aGlzLmRhdGVQaWNrZWQuXzRNLmxlbmd0aCA7CiAgICAvLyBjb2RlIGJsb2NrCiAgICBicmVhazsgICAgCiAgZGVmYXVsdDoKICAgIC8vIGNvZGUgYmxvY2sKfQoKLy8gdGhpcy5kaXNwQmtpbmZvLl8zTT0iQ09ERS0tLT4g56ys5LqM6ZqO5q61OmdldF9NX0NOVD0iKyBnZXRfTV9DTlQ7Ci8vIHRlbXBTdHJpbmcgPSB0ZW1wU3RyaW5nICsnfCcrIGk7IAoKZm9yIChsZXQgaSA9IDA7IGkgPCBnZXRfTV9DTlQ7IGkrKykgCnsgCiAgICBzd2l0Y2goTV9UeXBlKSB7CiAgICBjYXNlIDE6CiAgICAgICAgUmVCX2RhdGUgPSBuZXcgRGF0ZSgnIjIwMjItMDEtJyt0aGlzLmRhdGVQaWNrZWQuXzFNW2ldKyciJykgOwogICAgICAgIHRlbXBTdHJpbmcgPSB0ZW1wU3RyaW5nICsgTV9UeXBlKyIvIit0aGlzLmRhdGVQaWNrZWQuXzFNW2ldK2RheVtSZUJfZGF0ZS5nZXREYXkoKV0gICsgIiAsICI7CiAgICAgICAgdGhpcy5kaXNwQmtpbmZvLl8xTSA9IHRlbXBTdHJpbmcgOwogICAgICAgIC8vIGNvZGUgYmxvY2sKICAgICAgICBicmVhazsKICAgIGNhc2UgMjoKICAgICAgICBSZUJfZGF0ZSA9IG5ldyBEYXRlKCciMjAyMi0wMi0nK3RoaXMuZGF0ZVBpY2tlZC5fMk1baV0rJyInKSA7CiAgICAgICAgdGVtcFN0cmluZyA9IHRlbXBTdHJpbmcgKyBNX1R5cGUrIi8iK3RoaXMuZGF0ZVBpY2tlZC5fMk1baV0rZGF5W1JlQl9kYXRlLmdldERheSgpXSAgKyAiICwgIjsKICAgICAgICB0aGlzLmRpc3BCa2luZm8uXzJNID0gdGVtcFN0cmluZyA7CiAgICAgICAgLy8gY29kZSBibG9jawogICAgICAgIGJyZWFrOwogICAgY2FzZSAzOgogICAgICAgIFJlQl9kYXRlID0gbmV3IERhdGUoJyIyMDIyLTAzLScrdGhpcy5kYXRlUGlja2VkLl8zTVtpXSsnIicpIDsKICAgICAgICB0ZW1wU3RyaW5nID0gdGVtcFN0cmluZyArIE1fVHlwZSsiLyIrdGhpcy5kYXRlUGlja2VkLl8zTVtpXStkYXlbUmVCX2RhdGUuZ2V0RGF5KCldICArICIgLCAiOwogICAgICAgIHRoaXMuZGlzcEJraW5mby5fM00gPSB0ZW1wU3RyaW5nIDsKICAgICAgICAvLyBjb2RlIGJsb2NrCiAgICAgICAgYnJlYWs7CiAgICBjYXNlIDQ6CiAgICAgICAgUmVCX2RhdGUgPSBuZXcgRGF0ZSgnIjIwMjItMDQtJyt0aGlzLmRhdGVQaWNrZWQuXzRNW2ldKyciJykgOwogICAgICAgIHRlbXBTdHJpbmcgPSB0ZW1wU3RyaW5nICsgTV9UeXBlKyIvIit0aGlzLmRhdGVQaWNrZWQuXzRNW2ldK2RheVtSZUJfZGF0ZS5nZXREYXkoKV0gICsgIiAsICI7CiAgICAgICAgdGhpcy5kaXNwQmtpbmZvLl80TSA9IHRlbXBTdHJpbmcgOyAKICAgICAgICAvLyBjb2RlIGJsb2NrCiAgICAgICAgYnJlYWs7ICAgIAogICAgZGVmYXVsdDoKICAgICAgICAvLyBjb2RlIGJsb2NrCiAgICB9ICAKCiAgICAvLyB0ZW1wU3RyaW5nID0gdGVtcFN0cmluZyArIE1fVHlwZSsiLyIrdGhpcy5kYXRlUGlja2VkLl8xTVtpXStkYXlbUmVCX2RhdGUuZ2V0RGF5KCldICArICIgLCAiOwogCgogICAgLy8gdGhpcy5kaXNwQmtpbmZvLl8zTSA9IHRlbXBTdHJpbmcgOwoKICAgIC8vIHRlbXBTdHJpbmcgPSB0ZW1wU3RyaW5nICsgTV9UeXBlKyIvIit0aGlzLmRhdGVQaWNrZWQuXzFNW2ldK2RheVtSZUJfZGF0ZS5nZXREYXkoKV0gICsgIiAsICI7CiAgICAvLyB0aGlzLmRpc3BCa2luZm8uXzNNPSJDT0RFLS0tPiDnrKzlm5vpmo7mrrU6dGVtcFN0cmluZyA9ICIrICB0ZW1wU3RyaW5nOyAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAvLyB0aGlzLmRpc3BCa2luZm8udHJhbnNPVVRQVVQgPSAgTV9UeXBlKyIvIit0aGlzLmRhdGVQaWNrZWQuXzFNWzBdK2RheVtSZUJfZGF0ZS5nZXREYXkoKV07Cn0KLy8gdGhpcy5kaXNwQmtpbmZvLnRyYW5zT1VUUFVUID0gTlRfMDErTlRfMDIrTlRfMDMrTlRfMDQ7IC8vIOe1kOWQiOWbm+WAi+aciCDnmoToqLvoqJjjgIIKCnRoaXMuZGlzcEJraW5mby50cmFuc09VVFBVVCA9ICLljbPlsIfngrrmgqjlronmjpLlnKjku6XkuIvlub7ml6U6ICIrdGhpcy5kaXNwQmtpbmZvLl8xTSt0aGlzLmRpc3BCa2luZm8uXzJNK3RoaXMuZGlzcEJraW5mby5fM00rdGhpcy5kaXNwQmtpbmZvLl80TTsKLy8gdGhpcy5kaXNwQmtpbmZvLl8xTSA9IHRlbXBTdHJpbmc7CgoKICAgICAgICAKICAgICAgICAvLyB0aGlzLmRpc3BCa2luZm8udHJhbnNPVVRQVVQgPSBSZUJfZGF0ZS5nZXREYXkoKTsKCiAgICAgICAgLy8gLSAtIC0gLSAtIAogICAgICAgIC8vICAgdGhpcy5kaXNwQmtpbmZvLnRyYW5zT1VUUFVUID0gIE1fVHlwZSsiLyIrdGhpcy5kYXRlUGlja2VkLl8xTVswXStkYXlbUmVCX2RhdGUuZ2V0RGF5KCldOwogICAgICAgIC8vIC0gLSAtIC0gLSAKCiAgICAgICAgLy8gICBjb25zdCBkYXRlMSA9IGJpcnRoZGF5LmdldERhdGUoKTsKICAgICAgICAvLyAgICAgY29uc3QgZGF0ZTEyID0gYmlydGhkYXkuZ2V0RGF5KCk7CiAgICAgICAgICAgIAogICAgICB9LAoKICAgICAgdHJhbnNEYXkoKXsKICAgICAgICAgIGxldCBSZUJfZGF0ZSA9IG5ldyBEYXRlKCciMjAyMi0wMS0nK3RoaXMuZGF0ZVBpY2tlZC5fMU1bMF0rJyInKSA7CgogICAgICAgIC8vICAgdGhpcy5kaXNwQmtpbmZvLnRyYW5zT1VUUFVUID0gICIwMS8iK3RoaXMuZGF0ZVBpY2tlZC5fMU1bMF0rIigiK1JlQl9kYXRlLmdldERheSgpKyIpIjsKCiAgICAgICAgLy8gY29uc3QgUmVCX2RhdGUgPSBuZXcgRGF0ZSgnMjAyMi0wMS0wNScpIDsKICAgICAgICAvLyB0aGlzLmRpc3BCa2luZm8udHJhbnNPVVRQVVQgPSAiZGRkZGQiOwogICAgICAgIHRoaXMuZGlzcEJraW5mby50cmFuc09VVFBVVCA9IFJlQl9kYXRlLmdldERheSgpOwogICAgICAgIC8vICAgdGhpcy5kaXNwQmtpbmZvLnRyYW5zT1VUUFVUID0gICIwMS8iK3RoaXMuZGF0ZVBpY2tlZC5fMU1bMF0rIigiK1JlQl9kYXRlLmdldERheSgpKyIpIjsKIAogICAgICAgIC8vICAgY29uc3QgZGF0ZTEgPSBiaXJ0aGRheS5nZXREYXRlKCk7CiAgICAgICAgLy8gICAgIGNvbnN0IGRhdGUxMiA9IGJpcnRoZGF5LmdldERheSgpOwogICAgICAgICAgICAKICAgICAgfSwKCgogICAgLy8g6YCZ6YKK55CG6Kej5a6J5o6S77yM55yL55yLdG9kb0xpc3Qg55u46Zec5Y+D6ICD55qE56+E5L6L44CCCiAgICAvLyBodHRwczovL2NvZGVwZW4uaW8vSmFzb25qYW0vcGVuL1dQQmJHRwoKICAgIGdldFRpbWVUcmFucyhuZXdUaW1lKSB7CgkJCWlmICh0eXBlb2YgbmV3VGltZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjsKCQkJbGV0IHRpbWUgPSBuZXcgRGF0ZShuZXdUaW1lKTsKCQkJbGV0IHllYXIgPSB0aW1lLmdldEZ1bGxZZWFyKCk7CgkJCWxldCBtb250aCA9IFsiSmFuIiwiRmViIiwiTWFyIiwiQXByIiwiTWF5IiwiSnVuZSIsCgkJCQkJCQkgIkp1bHkiLCJBdWciLCJTZXAiLCJPY3QiLCJOb3YiLCJEZWMiXQoJCQlsZXQgZGF5ID0gdGltZS5nZXREYXRlKCk7CgkJCWxldCB3ZWVrID0gdGltZS5kYXkgPSBbJ1N1bicsJ01vbicsJ1R1ZScsJ1dlZCcsJ1RodScsJ0ZyaScsJ1NhdCddCgkJCWxldCBob3VyID0gdGltZS5nZXRIb3VycygpOwoJCQlsZXQgbWludXRlID0gdGltZS5nZXRNaW51dGVzKCk7CgkJCXJldHVybiBtb250aFt0aW1lLmdldE1vbnRoKCldICsgIi8iICsgKHBhcnNlSW50KGRheSwgMTApIDwgMTAgPyAnMCcgKyBkYXk6ZGF5KSAgKyAiLyIgKyB5ZWFyICsgIjxicj4gIiArIGhvdXIgKyAiOiIgKyAocGFyc2VJbnQobWludXRlLCAxMCkgPCAxMCA/ICcwJyArIG1pbnV0ZSA6IG1pbnV0ZSkgKyAiJm5ic3A7IiArIHdlZWtbdGltZS5nZXREYXkoKV07CgkJfSwKICAgICAvLyBQdXNoIG5ldyBwb3N0IGluIHRvIFRvZG9zCiAgICBhZGRUb2RvKCl7CiAgICAgIC8vIHRoaXMubmV3VG9kby5jcmVhdFRpbWU9IFdvcmREYXRhU2VydmljZUVYUC5nZXRkYigpOwogICAgICAvLyB0aGlzLm5ld1RvZG8uY3JlYXRUaW1lID0gZ2V0VGltZVRyYW5zKHRoaXMubmV3VG9kby5jcmVhdFRpbWUpIDsKICAgICAgdGhpcy5uZXdUb2RvLmNyZWF0VGltZSA9ICcyMDIwLTEyLTAyJyA7CiAgICAgIHRoaXMubmV3VG9kby5kYXRlTm90ZSA9IHRoaXMubmV3VG9kby5kYXRlTm90ZTsKICAgICAgV29yZERhdGFTZXJ2aWNlRVhQLmNyZWF0ZSh0aGlzLm5ld1RvZG8pCgogICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wJywKICAgICAgICAgICAgICBpY29uOiAnc3VjY2VzcycsCiAgICAgICAgICAgICAgdGl0bGU6ICfmm7TmlrDmiJDlip8nLAogICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICB0aW1lcjogMTUwMAogICAgICAgICAgICB9KTsgCiAgICAgIAoKICAgIH0sCiAgICB1cGRhdGVUb2RvKGtleSwgdmFsdWUpIHsKICAgICAgV29yZERhdGFTZXJ2aWNlRVhQLmdldEFsbCgpLmNoaWxkKGtleSkudXBkYXRlKHZhbHVlKTsKICAgICAgCiAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3AnLAogICAgICAgICAgICAgIGljb246ICdzdWNjZXNzJywKICAgICAgICAgICAgICB0aXRsZTogJ+abtOaWsOaIkOWKnycsCiAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgIHRpbWVyOiAxNTAwCiAgICAgICAgICAgIH0pOyAKICAgIH0sCiAgICAvLyBSZW1vdmUgY2hpbGQgYmFzZWQgb24ga2V5IC0gZmlyZWJhc2UgZnVuY3Rpb24KICAgIHJlbW92ZVRvZG8oa2V5KSB7ICAKICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgdGl0bGU6ICfnnJ/nmoTll44/JywKICAgICAgICAgICAgdGV4dDogIuiri+eiuuiqjeaYr+WQpuenu+mZpOizh+aWmSEiLAogICAgICAgICAgICBpY29uOiAnd2FybmluZycsCiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyMzMDg1ZDYnLAogICAgICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogJyNkMzMnLAogICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+Wft+ihjOWIqumZpCEnLAogICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAn5Y+W5raIJywKICAgICAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4gewogICAgICAgICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSB7CiAgICAgICAgICAgICAgU3dhbC5maXJlKAogICAgICAgICAgICAgICAgJ+WIqumZpOaIkOWKnyEnLAogICAgICAgICAgICAgICAgJ+S9oOeahOizh+aWme+8jOW3suWujOaIkOWIqumZpC4nLAogICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBXb3JkRGF0YVNlcnZpY2VFWFAuZ2V0QWxsKCkuY2hpbGQoa2V5KS5yZW1vdmUoKQogICAgICAgICAgICB9CiAgICAgICAgICB9KSAKICAgIH0sIAogICAgdXBkYXRlVHV0b3JpYWwoKSB7CiAgICAgIGNvbnN0IGRhdGEgPSB7CiAgICAgICAgdGl0bGU6IHRoaXMuY3VycmVudFR1dG9yaWFsLnRpdGxlLAogICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmN1cnJlbnRUdXRvcmlhbC5kZXNjcmlwdGlvbiwKICAgICAgICBkYXRlTm90ZTogdGhpcy5jdXJyZW50VHV0b3JpYWwuZGF0ZU5vdGUsCiAgICAgIH07CgogICAgICBXb3JkRGF0YVNlcnZpY2VFWFAudXBkYXRlKHRoaXMuY3VycmVudFR1dG9yaWFsLmtleSwgZGF0YSkKICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAi5pu05paw5oiQ5YqfISI7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgIH0pOwogICAgfSwgCiAgICBvbkRhdGFDaGFuZ2UoaXRlbXMpIHsKICAgICAgICBsZXQgX3R1dG9yaWFscyA9IFtdOyAgCiAgICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4gewogICAgICAgICAgbGV0IGtleSA9IGl0ZW0ua2V5OwogICAgICAgICAgbGV0IGRhdGEgPSBpdGVtLnZhbCgpOwogICAgICAgICAgX3R1dG9yaWFscy5wdXNoKHsKICAgICAgICAgICAga2V5OiBrZXksIAogICAgICAgICAgICB0ZXh0ICAgICA6IGRhdGEudGV4dCwgCiAgICAgICAgICAgIGNyZWF0VGltZTogZGF0YS5jcmVhdFRpbWUsCiAgICAgICAgICAgIC8vIGRhdGVOb3RlOiBkYXRhLmRhdGVOb3RlLAogCiAgICAgICAgLy8gbmFtZTogZGF0YS5uYW1lLAogICAgICAgIC8vIGFkczogZGF0YS5hZHMsCiAgICAgICAgLy8gcGhvbmU6IGRhdGEucGhvbmUsIAogICAgICAgIC8vIGRhdGVOb3RlOiBkYXRhLmRhdGVOb3RlLAogICAgICAgICAKICAgICAgICAvLyBtZW1vOiBkYXRhLm1lbW8sCiAgICAgICAgLy8gcGRfOTUwOiBkYXRhLnBkXzk1MCwKICAgICAgICAvLyBwZF81MDA6IGRhdGEucGRfNTAwLAogICAgICAgIC8vIG1lbW86IGRhdGEubWVtbywKCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICB0aGlzLnRvZG9zID0gX3R1dG9yaWFsczsgCiAgICB9LCAgCiAgICAKICAgIAogICAgZ2V0VGltZShrZXkpewogICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpOyAKICAgICAgdmFyIGRheSA9IHRvZGF5LmdldERhdGUoKTsKICAgICAgdmFyIG1vbnRoID0gdG9kYXkuZ2V0TW9udGgoKSArIDE7CiAgICAgIHZhciB5ZWFyID0gdG9kYXkuZ2V0RnVsbFllYXIoKTsKICAgICAgbGV0IHdlZWthcnlfRW4gPSBbJ1N1bicsJ01vbicsJ1R1ZScsJ1dlZCcsJ1RodScsJ0ZyaScsJ1NhdCddOwogICAgICBsZXQgd2Vla2FyeV9DbiA9IFsn5pelJywn5LiAJywn5LqMJywn5LiJJywn5ZubJywn5LqUJywn5YWtJ107CgogICAgICBsZXQgcHJld2VlayA9IHRvZGF5LmdldERheSgpOyAKCQkJbGV0IHdlZWsgPSB3ZWVrYXJ5X0NuW3ByZXdlZWtdIDsgIAoKICAgIC8vIC0gLSAtIC0gLSAKICAgIGxldCBzdHIgPSAnJzsgCgogICAgICAgCiAgICAgIGlmKCBrZXkgPT0gIkVuIil7ICBzdHIgPSB5ZWFyKyItIittb250aCsiLSIrZGF5KyIoIit3ZWVrYXJ5X0VuW3ByZXdlZWtdKyIpIiA7IH0KICAgICAgZWxzZSBpZigga2V5ID09ICdDbicpeyAgc3RyID0geWVhcisiLSIrbW9udGgrIi0iK2RheSsiKCIrd2Vla2FyeV9DbltwcmV3ZWVrXSsiKSIgOyB9CiAgICAgIGVsc2V7IHN0ciA9IHRvZGF5IH0KICAgIHJldHVybiBzdHIKCiAgICAKCiAgICB9LAogIH0sCiAgd2F0Y2g6IHsKICAgICAKICAgIC8vIHR1dG9yaWFsOiBmdW5jdGlvbih0dXRvcmlhbCkgewogICAgLy8gICB0aGlzLmN1cnJlbnRUdXRvcmlhbCA9IHsgLi4udHV0b3JpYWwgfTsKICAgIC8vICAgdGhpcy5tZXNzYWdlID0gIiI7CiAgICAvLyB9LAogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHY6IGZ1bmN0aW9uICgpIHsgCiAgICAgIHJldHVybiB0aGlzLm5ld1RvZG8uZGF0ZU5vdGVbMF0gKyB0aGlzLm5ld1RvZG8uZGF0ZU5vdGVbMV0gKyB0aGlzLm5ld1RvZG8uZGF0ZU5vdGVbMl0gKyB0aGlzLm5ld1RvZG8uZGF0ZU5vdGVbM10gIAogICAgfSwKCiAgICBEYXlBbGw6IGZ1bmN0aW9uKCkgewogICAgICByciA9IFsgdGhpcy5EMSx0aGlzLkQyLHRoaXMuRDMsdGhpcy5ENCBdCiAgICAgIHJldHVybiAgcnIKICAgIH0sCiAgICBmYW1vdXM6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5zdG9yaWVzLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0udXB2b3RlcyA+IDMwOwogICAgICB9KQogICAgfSwKICAgIERheWNoa2VyOiBmdW5jdGlvbihNb24sRGF5KSB7CiAgICAgIHJldHVybiB0aGlzLnRvZG8uZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbS5jcmVhdFRpbWUgPT0gJzIwMjEtMTItMDInOwogICAgICB9KQogICAgfSwKICAgIHBvc2Noa2VyXzE6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5vZHJMaXN0LmZpbHRlcihmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0uTm93UG9zID09IDE7CiAgICAgIH0pCiAgICB9LAogICAgcG9zY2hrZXJfMjogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLm9kckxpc3QuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbS5Ob3dQb3MgPT0gMjsKICAgICAgfSkKICAgIH0sCiAgICBwb3NjaGtlcl8zOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMub2RyTGlzdC5maWx0ZXIoZnVuY3Rpb24oaXRlbSkgewogICAgICAgIHJldHVybiBpdGVtLk5vd1BvcyA9PSAzOwogICAgICB9KQogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuZz10aGlzLmdldFRpbWUoKTsKICAgIFdvcmREYXRhU2VydmljZUVYUC5nZXRBbGwoKS5vbigidmFsdWUiLCB0aGlzLm9uRGF0YUNoYW5nZSk7IAogIH0sCiAgYmVmb3JlRGVzdHJveSgpIHsKICAgIFdvcmREYXRhU2VydmljZUVYUC5nZXRBbGwoKS5vZmYoInZhbHVlIiwgdGhpcy5vbkRhdGFDaGFuZ2UpOwogIH0KfTsgCgo="},null]}