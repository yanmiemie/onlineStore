{"remainingRequest":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/src/views/copyMsg.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/src/views/copyMsg.vue","mtime":1643014160332},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IFdvcmREYXRhU2VydmljZUVYUCB9IGZyb20gIi4uL3NlcnZpY2VzL1RvZG9TZXJ2aWNlIjsgIAoKY29uc3QgY2l0eU9wdGlvbnMgPSBbJ+Wkp+eTticsICfkuK3nk7YnLCAnR3Vhbmd6aG91JywgJ1NoZW56aGVuJ107CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogInR1dG9yaWFscy1saXN0IiwKICBjb21wb25lbnRzOiB7ICAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsgCgogICAgICAgIAogICAgICAgIC8vIC0gLSAtIC0gICAKICAgICAgICAgY2hlY2tBbGw6IGZhbHNlLAogICAgICAgIGNoZWNrZWRDaXRpZXM6IFsnU2hhbmdoYWknLCAnQmVpamluZyddLAogICAgICAgIGNpdGllczogY2l0eU9wdGlvbnMsCiAgICAgICAgaXNJbmRldGVybWluYXRlOiB0cnVlLAoKICAgICAgICAvLyAtIC0gLSAtIAogICAgICBzaG93TW9kYWw6ZmFsc2UsCiAgICAgIGc6IiIsCiAgICAgIGQ6IiIsCiAgICAgIHYyOiIiLAogICAgICBEMTogJycsCiAgICAgIEQyOiAnJywKICAgICAgRDM6ICcnLAogICAgICBENDogJycsICAKICAgICAgZGF0ZVBpY2tlZDp7ICAKICAgICAgICBfMU06W10sCiAgICAgICAgXzJNOltdLAogICAgICAgIF8zTTpbXSwKICAgICAgICBfNE06W10sCiAgICAgICAgfQogICAgICAsCiAgICAgIGRpc3BCa2luZm86eyAgCiAgICAgICAgICB0cmFuc09VVFBVVDoieHgiLAogICAgICAgIF8xTTpbXSwKICAgICAgICBfMk06W10sCiAgICAgICAgXzNNOltdLAogICAgICAgIF80TTpbXSwKICAgICAgICB9CiAgICAgICwKICAgICAgbmV3VG9kbzp7IAogICAgICAgIHRleHQ6IiIsCiAgICAgICAgbmFtZToiIiwKICAgICAgICBhZHM6IiIsCiAgICAgICAgcGhvbmU6IiIsCiAgICAgICAgQ1JNd2F5Olsnc2VsZWN0ZWQgYW5kIGRpc2FibGVkJ10sCiAgICAgICAgY3JlYXRUaW1lOiAiIiwgLy8gRGF0ZSAKICAgICAgICBkYXRlTm90ZTpbXSwKICAgICAgICBwZGNvZWQ6W10sCiAgICAgICAgcGRfOTUwOltdLAogICAgICAgIHBkXzUwMDpbXSwKICAgICAgICBwZF8yNTA6W10sCiAgICAgICAgcGRfMTAwOltdLAogICAgICAgIG1lbW86W10sCiAgICAgICAgfSwgCgogICAgICAvLyAtIC0gLSAtIC0gCgogICAgICBwaWNrZXJPcHRpb25zOiB7CiAgICAgICAgICBkaXNhYmxlZERhdGUodGltZSkgewogICAgICAgICAgICByZXR1cm4gdGltZS5nZXRUaW1lKCkgPiBEYXRlLm5vdygpOwogICAgICAgICAgfSwKICAgICAgICAgIHNob3J0Y3V0czogW3sKICAgICAgICAgICAgdGV4dDogJ1RvZGF5JywKICAgICAgICAgICAgb25DbGljayhwaWNrZXIpIHsKICAgICAgICAgICAgICBwaWNrZXIuJGVtaXQoJ3BpY2snLCBuZXcgRGF0ZSgpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgewogICAgICAgICAgICB0ZXh0OiAnWWVzdGVyZGF5JywKICAgICAgICAgICAgb25DbGljayhwaWNrZXIpIHsKICAgICAgICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTsKICAgICAgICAgICAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgLSAzNjAwICogMTAwMCAqIDI0KTsKICAgICAgICAgICAgICBwaWNrZXIuJGVtaXQoJ3BpY2snLCBkYXRlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgewogICAgICAgICAgICB0ZXh0OiAnQSB3ZWVrIGFnbycsCiAgICAgICAgICAgIG9uQ2xpY2socGlja2VyKSB7CiAgICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7CiAgICAgICAgICAgICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpIC0gMzYwMCAqIDEwMDAgKiAyNCAqIDcpOwogICAgICAgICAgICAgIHBpY2tlci4kZW1pdCgncGljaycsIGRhdGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9XQogICAgICAgIH0sCiAgICAgICAgY2hlY2tMaXN0OiBbJ3NlbGVjdGVkIGFuZCBkaXNhYmxlZCcsJ09wdGlvbiBBJ10sCiAgICAgICAgdmFsdWUxOiAnJywKICAgICAgICB2YWx1ZTI6ICcnLAogICAgICAgIHZhbHVlMzogJycsCiAgICAgICAgIHZhbHVlMzM6IG5ldyBEYXRlKCksCgogICAgICAgIC8vIC0gLSAtIC0gLSAtIAogICAgfTsKICB9LAogIG1ldGhvZHM6IHsgIAoKICAgICAgdHJhbnNEYXlfTWRmMShNX1R5cGUpewogCgogICAgICAgIGxldCBSZUJfZGF0ZTsKICAgICAgICBsZXQgZGF5ID0gWyco5pelKScsJyjkuIApJywnKOS6jCknLCco5LiJKScsJyjlm5spJywnKOS6lCknLCco5YWtKSddOwogICAgICAgIGxldCB0ZW1wRGF5PSIiOwogICAgICAgIGxldCB0ZW1wU3RyaW5nPSIiOwogICAgICAgIGxldCBnZXRfTV9DTlQ9MTsKCgogICAgICAgIHN3aXRjaChNX1R5cGUpIHsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIGdldF9NX0NOVCA9IHRoaXMuZGF0ZVBpY2tlZC5fMU0ubGVuZ3RoIDsKICAgICAgICAgICAgLy8gY29kZSBibG9jawogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIGdldF9NX0NOVCA9IHRoaXMuZGF0ZVBpY2tlZC5fMk0ubGVuZ3RoIDsKICAgICAgICAgICAgLy8gY29kZSBibG9jawogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIGdldF9NX0NOVCA9IHRoaXMuZGF0ZVBpY2tlZC5fM00ubGVuZ3RoIDsKICAgICAgICAgICAgLy8gY29kZSBibG9jawogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGdldF9NX0NOVCA9IHRoaXMuZGF0ZVBpY2tlZC5fNE0ubGVuZ3RoIDsKICAgICAgICAgICAgLy8gY29kZSBibG9jawogICAgICAgICAgICBicmVhazsgICAgCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgLy8gY29kZSBibG9jawogICAgICAgIH0gOwogICAgICAgIAogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ2V0X01fQ05UOyBpKyspIAogICAgICAgIHsgCiAgICAgICAgICAgIHN3aXRjaChNX1R5cGUpIHsKICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgUmVCX2RhdGUgPSBuZXcgRGF0ZSgnIjIwMjItMDEtJyt0aGlzLmRhdGVQaWNrZWQuXzFNW2ldLnRvU3RyaW5nKCkrJyInKSA7IAogICAgICAgICAgICAgICAgdGVtcFN0cmluZyA9IHRlbXBTdHJpbmcgKyBNX1R5cGUrIi8iK3RoaXMuZGF0ZVBpY2tlZC5fMU1baV0rICIoICkiICArICIgLCAiOwogICAgICAgICAgICAgICAgLy8gdGhpcy5kaXNwQmtpbmZvLl9NID0gdGVtcFN0cmluZyA7CiAgICAgICAgICAgICAgICB2YXIgdDIgPSBkYXlqcyhSZUJfZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREJykudG9TdHJpbmcoKSAgOwogICAgICAgICAgICAgICAgdmFyIHRpbWUgPSAgdDIuc3BsaXQoJy0nKTsKICAgICAgICAgICAgICAgIHZhciB0aW1lMSA9IG5ldyBEYXRlKHRpbWVbMF0rdGltZVsxXS0xLHRpbWVbMl0pOwogICAgICAgICAgICAgICAgdGhpcy5kaXNwQmtpbmZvLl8xTSA9IHRpbWVbMF0gKyIvIiArdGltZVsxXSArIi8iK3RpbWVbMl0gKyIoIiArIFJlQl9kYXRlLmdldERheSgpOwogICAgICAgICAgICAgICAgLy8gdGhpcy5kaXNwQmtpbmZvLl8xTT0gUmVCX2RhdGU7CiAgICAgICAgICAgICAgICAvLyB0aGlzLmRpc3BCa2luZm8uXzFNPXRpbWU7CiAgICAgICAgICAgICAgICAvLyBjb2RlIGJsb2NrCiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgUmVCX2RhdGUgPSBuZXcgRGF0ZSgnIjIwMjIvMDIvJyt0aGlzLmRhdGVQaWNrZWQuXzJNW2ldLnRvU3RyaW5nKCkrJyInKSA7CiAgICAgICAgICAgICAgICB0ZW1wU3RyaW5nID0gdGVtcFN0cmluZyArIE1fVHlwZSsiLyIrdGhpcy5kYXRlUGlja2VkLl8yTVtpXStkYXlbUmVCX2RhdGUuZ2V0RGF5KCldICArICIgLCAiOwogICAgICAgICAgICAgICAgdGhpcy5kaXNwQmtpbmZvLl8yTSA9IHRlbXBTdHJpbmcgKyI/PyIrIGRheWpzKFJlQl9kYXRlKS5mb3JtYXQoJ1lZWVkvTU0vREQnKS50b1N0cmluZygpICA7CiAgICAgICAgICAgICAgICAvLyBjb2RlIGJsb2NrCiAgICAgICAgICAgICAgICB0aGlzLmRpc3BCa2luZm8uXzNNID0gIktLSyIrIGRheWpzKFJlQl9kYXRlKS5mb3JtYXQoJ2RkZCcpLnRvU3RyaW5nKCkgIDsKICAgICAgICAgICAgICAgIC8vIHRoaXMuZGlzcEJraW5mby5fM00gPSB0ZW1wU3RyaW5nICt0aGlzLmRhdGVQaWNrZWQuZGF5anMoKS5mb3JtYXQoJ0wgTFQnKS50b1N0cmluZygpOwogICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIFJlQl9kYXRlID0gbmV3IERhdGUoJyIyMDIyLTAzLScrdGhpcy5kYXRlUGlja2VkLl8zTVtpXS50b1N0cmluZygpKyciJykgIDsKCiAgICAgICAgICAgICAgICAvLyB2YXIgdGltZSA9IFJlQl9kYXRlLnJlcGxhY2UoLy1nLywnOicpLnJlcGxhY2UoJyAnLCc6Jyk7CiAgICAgICAgICAgICAgICB0aW1lID0gIFJlQl9kYXRlLnNwbGl0KCctJyk7CiAgICAgICAgICAgICAgICB2YXIgdGltZTEgPSBuZXcgRGF0ZSh0aW1lWzBdLHRpbWVbMV0tMSx0aW1lWzJdKQoKICAgICAgICAgICAgICAgIC8vIHRlbXBTdHJpbmcgPSB0ZW1wU3RyaW5nICsgTV9UeXBlKyIvIit0aGlzLmRhdGVQaWNrZWQuXzNNW2ldK2RheVtSZUJfZGF0ZS5nZXREYXkoKV0gICsgIiAsICI7CiAgICAgICAgICAgICAgICAvLyB0aGlzLmRpc3BCa2luZm8uXzNNID0gdGltZTEgKyAi44CQIit0aW1lMS5nZXREYXkoKSsgIuOAkSI7CiAgICAgICAgICAgICAgICAvLyB0aGlzLmRpc3BCa2luZm8uXzNNPSBSZUJfZGF0ZTsKICAgICAgICAgICAgICAgIC8vIGNvZGUgYmxvY2sKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBSZUJfZGF0ZSA9IG5ldyBEYXRlKCciMjAyMi0wNC0nK3RoaXMuZGF0ZVBpY2tlZC5fNE1baV0udG9TdHJpbmcoKSsnIicpIDsKICAgICAgICAgICAgICAgIHRlbXBTdHJpbmcgPSB0ZW1wU3RyaW5nICsgTV9UeXBlKyIvIit0aGlzLmRhdGVQaWNrZWQuXzRNW2ldK2RheVtSZUJfZGF0ZS5nZXREYXkoKV0gICsgIiAsICI7CiAgICAgICAgICAgICAgICB0aGlzLmRpc3BCa2luZm8uXzRNID0gdGVtcFN0cmluZyA7IAogICAgICAgICAgICAgICAgLy8gY29kZSBibG9jawogICAgICAgICAgICAgICAgYnJlYWs7ICAgIAogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgLy8gY29kZSBibG9jawogICAgICAgICAgICB9ICAgCiAgICAgICAgfSA7IAogICAgICAgIHRoaXMuZGlzcEJraW5mby50cmFuc09VVFBVVCA9ICLljbPlsIfngrrmgqjlronmjpLlnKjku6XkuIvlub7ml6U6ICIrdGhpcy5kaXNwQmtpbmZvLl8xTSt0aGlzLmRpc3BCa2luZm8uXzJNK3RoaXMuZGlzcEJraW5mby5fM00rdGhpcy5kaXNwQmtpbmZvLl80TTsgICAgCiAgICAgIH0sIAoKICAgIC8vIOmAmemCiueQhuino+WuieaOku+8jOeci+eci3RvZG9MaXN0IOebuOmXnOWPg+iAg+eahOevhOS+i+OAggogICAgLy8gaHR0cHM6Ly9jb2RlcGVuLmlvL0phc29uamFtL3Blbi9XUEJiR0cKCiAgICBnZXRUaW1lVHJhbnMobmV3VGltZSkgewoJCQlpZiAodHlwZW9mIG5ld1RpbWUgPT09ICd1bmRlZmluZWQnKSByZXR1cm47CgkJCWxldCB0aW1lID0gbmV3IERhdGUobmV3VGltZSk7CgkJCWxldCB5ZWFyID0gdGltZS5nZXRGdWxsWWVhcigpOwoJCQlsZXQgbW9udGggPSBbIkphbiIsIkZlYiIsIk1hciIsIkFwciIsIk1heSIsIkp1bmUiLAoJCQkJCQkJICJKdWx5IiwiQXVnIiwiU2VwIiwiT2N0IiwiTm92IiwiRGVjIl0KCQkJbGV0IGRheSA9IHRpbWUuZ2V0RGF0ZSgpOwoJCQlsZXQgd2VlayA9IHRpbWUuZGF5ID0gWydTdW4nLCdNb24nLCdUdWUnLCdXZWQnLCdUaHUnLCdGcmknLCdTYXQnXQoJCQlsZXQgaG91ciA9IHRpbWUuZ2V0SG91cnMoKTsKCQkJbGV0IG1pbnV0ZSA9IHRpbWUuZ2V0TWludXRlcygpOwoJCQlyZXR1cm4gbW9udGhbdGltZS5nZXRNb250aCgpXSArICIvIiArIChwYXJzZUludChkYXksIDEwKSA8IDEwID8gJzAnICsgZGF5OmRheSkgICsgIi8iICsgeWVhciArICI8YnI+ICIgKyBob3VyICsgIjoiICsgKHBhcnNlSW50KG1pbnV0ZSwgMTApIDwgMTAgPyAnMCcgKyBtaW51dGUgOiBtaW51dGUpICsgIiZuYnNwOyIgKyB3ZWVrW3RpbWUuZ2V0RGF5KCldOwoJCX0sCiAgICAgLy8gUHVzaCBuZXcgcG9zdCBpbiB0byBUb2RvcwogICAgYWRkVG9kbygpewogICAgICAvLyB0aGlzLm5ld1RvZG8uY3JlYXRUaW1lPSBXb3JkRGF0YVNlcnZpY2VFWFAuZ2V0ZGIoKTsKICAgICAgLy8gdGhpcy5uZXdUb2RvLmNyZWF0VGltZSA9IGdldFRpbWVUcmFucyh0aGlzLm5ld1RvZG8uY3JlYXRUaW1lKSA7CiAgICAgIHRoaXMubmV3VG9kby5jcmVhdFRpbWUgPSAnMjAyMC0xMi0wMicgOwogICAgICB0aGlzLm5ld1RvZG8uZGF0ZU5vdGUgPSB0aGlzLm5ld1RvZG8uZGF0ZU5vdGU7CiAgICAgIFdvcmREYXRhU2VydmljZUVYUC5jcmVhdGUodGhpcy5uZXdUb2RvKQoKICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcCcsCiAgICAgICAgICAgICAgaWNvbjogJ3N1Y2Nlc3MnLAogICAgICAgICAgICAgIHRpdGxlOiAn5pu05paw5oiQ5YqfJywKICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgdGltZXI6IDE1MDAKICAgICAgICAgICAgfSk7IAogICAgICAKCiAgICB9LAogICAgdXBkYXRlVG9kbyhrZXksIHZhbHVlKSB7CiAgICAgIFdvcmREYXRhU2VydmljZUVYUC5nZXRBbGwoKS5jaGlsZChrZXkpLnVwZGF0ZSh2YWx1ZSk7CiAgICAgIAogICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wJywKICAgICAgICAgICAgICBpY29uOiAnc3VjY2VzcycsCiAgICAgICAgICAgICAgdGl0bGU6ICfmm7TmlrDmiJDlip8nLAogICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICB0aW1lcjogMTUwMAogICAgICAgICAgICB9KTsgCiAgICB9LAogICAgLy8gUmVtb3ZlIGNoaWxkIGJhc2VkIG9uIGtleSAtIGZpcmViYXNlIGZ1bmN0aW9uCiAgICByZW1vdmVUb2RvKGtleSkgeyAgCiAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgIHRpdGxlOiAn55yf55qE5ZeOPycsCiAgICAgICAgICAgIHRleHQ6ICLoq4vnorroqo3mmK/lkKbnp7vpmaTos4fmlpkhIiwKICAgICAgICAgICAgaWNvbjogJ3dhcm5pbmcnLAogICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICcjMzA4NWQ2JywKICAgICAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICcjZDMzJywKICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfln7fooYzliKrpmaQhJywKICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsCiAgICAgICAgICB9KS50aGVuKChyZXN1bHQpID0+IHsKICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0NvbmZpcm1lZCkgewogICAgICAgICAgICAgIFN3YWwuZmlyZSgKICAgICAgICAgICAgICAgICfliKrpmaTmiJDlip8hJywKICAgICAgICAgICAgICAgICfkvaDnmoTos4fmlpnvvIzlt7LlrozmiJDliKrpmaQuJywKICAgICAgICAgICAgICAgICdzdWNjZXNzJwogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgV29yZERhdGFTZXJ2aWNlRVhQLmdldEFsbCgpLmNoaWxkKGtleSkucmVtb3ZlKCkKICAgICAgICAgICAgfQogICAgICAgICAgfSkgCiAgICB9LCAKICAgIHVwZGF0ZVR1dG9yaWFsKCkgewogICAgICBjb25zdCBkYXRhID0gewogICAgICAgIHRpdGxlOiB0aGlzLmN1cnJlbnRUdXRvcmlhbC50aXRsZSwKICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5jdXJyZW50VHV0b3JpYWwuZGVzY3JpcHRpb24sCiAgICAgICAgZGF0ZU5vdGU6IHRoaXMuY3VycmVudFR1dG9yaWFsLmRhdGVOb3RlLAogICAgICB9OwoKICAgICAgV29yZERhdGFTZXJ2aWNlRVhQLnVwZGF0ZSh0aGlzLmN1cnJlbnRUdXRvcmlhbC5rZXksIGRhdGEpCiAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgdGhpcy5tZXNzYWdlID0gIuabtOaWsOaIkOWKnyEiOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICB9KTsKICAgIH0sIAogICAgb25EYXRhQ2hhbmdlKGl0ZW1zKSB7CiAgICAgICAgbGV0IF90dXRvcmlhbHMgPSBbXTsgIAogICAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHsKICAgICAgICAgIGxldCBrZXkgPSBpdGVtLmtleTsKICAgICAgICAgIGxldCBkYXRhID0gaXRlbS52YWwoKTsKICAgICAgICAgIF90dXRvcmlhbHMucHVzaCh7CiAgICAgICAgICAgIGtleToga2V5LCAKICAgICAgICAgICAgdGV4dCAgICAgOiBkYXRhLnRleHQsIAogICAgICAgICAgICBjcmVhdFRpbWU6IGRhdGEuY3JlYXRUaW1lLAogICAgICAgICAgICAvLyBkYXRlTm90ZTogZGF0YS5kYXRlTm90ZSwKIAogICAgICAgIC8vIG5hbWU6IGRhdGEubmFtZSwKICAgICAgICAvLyBhZHM6IGRhdGEuYWRzLAogICAgICAgIC8vIHBob25lOiBkYXRhLnBob25lLCAKICAgICAgICAvLyBkYXRlTm90ZTogZGF0YS5kYXRlTm90ZSwKICAgICAgICAgCiAgICAgICAgLy8gbWVtbzogZGF0YS5tZW1vLAogICAgICAgIC8vIHBkXzk1MDogZGF0YS5wZF85NTAsCiAgICAgICAgLy8gcGRfNTAwOiBkYXRhLnBkXzUwMCwKICAgICAgICAvLyBtZW1vOiBkYXRhLm1lbW8sCgogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy50b2RvcyA9IF90dXRvcmlhbHM7IAogICAgfSwgIAogICAgCiAgICAKICAgIGdldFRpbWUoa2V5KXsKICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTsgCiAgICAgIHZhciBkYXkgPSB0b2RheS5nZXREYXRlKCk7CiAgICAgIHZhciBtb250aCA9IHRvZGF5LmdldE1vbnRoKCkgKyAxOwogICAgICB2YXIgeWVhciA9IHRvZGF5LmdldEZ1bGxZZWFyKCk7CiAgICAgIGxldCB3ZWVrYXJ5X0VuID0gWydTdW4nLCdNb24nLCdUdWUnLCdXZWQnLCdUaHUnLCdGcmknLCdTYXQnXTsKICAgICAgbGV0IHdlZWthcnlfQ24gPSBbJ+aXpScsJ+S4gCcsJ+S6jCcsJ+S4iScsJ+WbmycsJ+S6lCcsJ+WFrSddOwoKICAgICAgbGV0IHByZXdlZWsgPSB0b2RheS5nZXREYXkoKTsgCgkJCWxldCB3ZWVrID0gd2Vla2FyeV9DbltwcmV3ZWVrXSA7ICAKCiAgICAvLyAtIC0gLSAtIC0gCiAgICBsZXQgc3RyID0gJyc7IAoKICAgICAgIAogICAgICBpZigga2V5ID09ICJFbiIpeyAgc3RyID0geWVhcisiLSIrbW9udGgrIi0iK2RheSsiKCIrd2Vla2FyeV9FbltwcmV3ZWVrXSsiKSIgOyB9CiAgICAgIGVsc2UgaWYoIGtleSA9PSAnQ24nKXsgIHN0ciA9IHllYXIrIi0iK21vbnRoKyItIitkYXkrIigiK3dlZWthcnlfQ25bcHJld2Vla10rIikiIDsgfQogICAgICBlbHNleyBzdHIgPSB0b2RheSB9CiAgICByZXR1cm4gc3RyCgogICAgCgogICAgfSwKICB9LAogIHdhdGNoOiB7CiAgICAgCiAgICAvLyB0dXRvcmlhbDogZnVuY3Rpb24odHV0b3JpYWwpIHsKICAgIC8vICAgdGhpcy5jdXJyZW50VHV0b3JpYWwgPSB7IC4uLnR1dG9yaWFsIH07CiAgICAvLyAgIHRoaXMubWVzc2FnZSA9ICIiOwogICAgLy8gfSwKICB9LAogIGNvbXB1dGVkOiB7CiAgICB2OiBmdW5jdGlvbiAoKSB7IAogICAgICByZXR1cm4gdGhpcy5uZXdUb2RvLmRhdGVOb3RlWzBdICsgdGhpcy5uZXdUb2RvLmRhdGVOb3RlWzFdICsgdGhpcy5uZXdUb2RvLmRhdGVOb3RlWzJdICsgdGhpcy5uZXdUb2RvLmRhdGVOb3RlWzNdICAKICAgIH0sCgogICAgRGF5QWxsOiBmdW5jdGlvbigpIHsKICAgICAgcnIgPSBbIHRoaXMuRDEsdGhpcy5EMix0aGlzLkQzLHRoaXMuRDQgXQogICAgICByZXR1cm4gIHJyCiAgICB9LAogICAgZmFtb3VzOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuc3Rvcmllcy5maWx0ZXIoZnVuY3Rpb24oaXRlbSkgewogICAgICAgIHJldHVybiBpdGVtLnVwdm90ZXMgPiAzMDsKICAgICAgfSkKICAgIH0sCiAgICBEYXljaGtlcjogZnVuY3Rpb24oTW9uLERheSkgewogICAgICByZXR1cm4gdGhpcy50b2RvLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0uY3JlYXRUaW1lID09ICcyMDIxLTEyLTAyJzsKICAgICAgfSkKICAgIH0sCiAgICBwb3NjaGtlcl8xOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMub2RyTGlzdC5maWx0ZXIoZnVuY3Rpb24oaXRlbSkgewogICAgICAgIHJldHVybiBpdGVtLk5vd1BvcyA9PSAxOwogICAgICB9KQogICAgfSwKICAgIHBvc2Noa2VyXzI6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5vZHJMaXN0LmZpbHRlcihmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0uTm93UG9zID09IDI7CiAgICAgIH0pCiAgICB9LAogICAgcG9zY2hrZXJfMzogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLm9kckxpc3QuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbS5Ob3dQb3MgPT0gMzsKICAgICAgfSkKICAgIH0KICB9LAogIG1vdW50ZWQoKSB7CiAgICB0aGlzLmc9dGhpcy5nZXRUaW1lKCk7CiAgICBXb3JkRGF0YVNlcnZpY2VFWFAuZ2V0QWxsKCkub24oInZhbHVlIiwgdGhpcy5vbkRhdGFDaGFuZ2UpOyAKICB9LAogIGJlZm9yZURlc3Ryb3koKSB7CiAgICBXb3JkRGF0YVNlcnZpY2VFWFAuZ2V0QWxsKCkub2ZmKCJ2YWx1ZSIsIHRoaXMub25EYXRhQ2hhbmdlKTsKICB9Cn07IAoK"},null]}