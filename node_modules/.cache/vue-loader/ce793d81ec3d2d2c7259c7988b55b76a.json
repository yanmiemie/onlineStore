{"remainingRequest":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/src/views/todoList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/src/views/todoList.vue","mtime":1639937806646},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/yanMieeMie/GitHub/YanmieemieHpage/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}